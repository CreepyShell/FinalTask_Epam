// <auto-generated />
using System;
using InternetForum.Administration.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InternetForum.Administration.DAL.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20220203225532_AddedSaltAndOwnerRole")]
    partial class AddedSaltAndOwnerRole
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InternetForum.Administration.DAL.IdentityModels.AuthUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CodeWords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<byte[]>("salt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            CodeWords = "good_summer_hollidays",
                            ConcurrencyStamp = "29a88a00-cc4e-4f50-975f-a9bfd824627f",
                            Email = "anton@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTON@GMAIL.COM",
                            NormalizedUserName = "ANTON_1990",
                            PasswordHash = "7bi7gJ3/LNEKOkqCvCF8T5MJWjI23GBrxYiPMTmGV1U=",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bc14db7c-f529-4dcb-9120-9ca6be23c181",
                            TwoFactorEnabled = false,
                            UserName = "anton_1990",
                            salt = new byte[] { 239, 40, 24, 28, 201, 108, 9, 164, 218, 44, 230, 103, 243, 210, 40, 227, 4, 31, 245, 49, 239, 38, 228, 71, 73, 50, 162, 38, 204, 224, 12, 172 }
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23665b11-e2df-4e13-9237-7d39767e83b9",
                            Email = "dmitro_kovalcuk@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DMITRO_KOVALCUK@GMAIL.COM",
                            NormalizedUserName = "DMIDRO",
                            PasswordHash = "5FaVRUYDNlmA5fspxYnObyeP8PlfTXdDHH08ILn9XfU=",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3806388-b109-4ef0-a6d2-1b60c45d0074",
                            TwoFactorEnabled = false,
                            UserName = "dmidro",
                            salt = new byte[] { 114, 53, 226, 149, 70, 167, 84, 79, 175, 151, 201, 46, 230, 111, 48, 5, 170, 194, 54, 112, 192, 33, 145, 121, 76, 43, 95, 99, 113, 52, 187, 6 }
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            CodeWords = "Whiski",
                            ConcurrencyStamp = "133b5cb8-58b2-4d51-a53e-a3ce03f301ed",
                            Email = "My_mail84@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MY_MAIL84@GMAIL.COM",
                            NormalizedUserName = "USER1984",
                            PasswordHash = "BnGrZd3DgF/LpNAVRLy/yMEQF60jJotJgioc/k36Aaw=",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f631a080-1f4d-48fc-8a8a-82e750da943a",
                            TwoFactorEnabled = false,
                            UserName = "user1984",
                            salt = new byte[] { 238, 249, 69, 57, 26, 38, 36, 56, 111, 152, 200, 122, 157, 33, 7, 187, 79, 132, 66, 145, 225, 112, 22, 65, 222, 187, 208, 220, 145, 109, 237, 157 }
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4a78659-e69c-4758-8078-555f6c701dfc",
                            Email = "GoodLuck11@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GOODLUCK11@GMAIL.COM",
                            NormalizedUserName = "HAVE_A_NICE_DAY",
                            PasswordHash = "+fw/IThmwaKuhDduV2zTNzLD/yyS+wQZZDnLZW6KQLg=",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68d62387-d258-4a9e-9cb7-dfd0c7d15e76",
                            TwoFactorEnabled = false,
                            UserName = "Have_A_Nice_Day",
                            salt = new byte[] { 195, 93, 49, 152, 232, 160, 32, 109, 243, 76, 18, 149, 26, 4, 139, 52, 84, 79, 198, 3, 6, 227, 166, 182, 188, 240, 113, 119, 97, 44, 48, 173 }
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            CodeWords = "Veni, vidi, vici",
                            ConcurrencyStamp = "f0efcbfd-6ab5-4a6c-8fc8-74b4663b3d09",
                            Email = "t_mike2002_11@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "t_mike2002_11@gmail.com",
                            NormalizedUserName = "MIKE_2002",
                            PasswordHash = "fXBqIKok+nPPn+/PvFD6q0sdO/Hr63iULr0G+PmLwJE=",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "918a8b7b-edcf-46a0-99ea-b3a2cb783111",
                            TwoFactorEnabled = false,
                            UserName = "mike_2002",
                            salt = new byte[] { 133, 85, 124, 102, 178, 36, 61, 50, 113, 19, 82, 239, 224, 85, 140, 225, 22, 23, 246, 82, 136, 253, 172, 216, 87, 49, 237, 170, 17, 88, 44, 123 }
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            CodeWords = "owner of this project",
                            ConcurrencyStamp = "0c52977a-cb5a-4448-ba54-e070885124fd",
                            Email = "danil.t404@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "danil.t404@gmail.com",
                            NormalizedUserName = "DANIL_OWNER",
                            PasswordHash = "D6E8Lon6PMsdI+nk2+V9rKxbEVRfWJsxvesYrt0Pl2U=",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b483070-2b92-441e-ac98-b15be56de7c3",
                            TwoFactorEnabled = false,
                            UserName = "danil_owner",
                            salt = new byte[] { 43, 150, 1, 40, 49, 238, 134, 154, 12, 128, 168, 217, 148, 47, 195, 35, 183, 162, 119, 56, 123, 155, 4, 166, 231, 121, 244, 194, 21, 104, 247, 2 }
                        });
                });

            modelBuilder.Entity("InternetForum.Administration.DAL.IdentityModels.IdentityUserRefreshToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<string>", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "4"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "5"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<string>");

                    b.HasDiscriminator().HasValue("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "bc0b6a8a-2e28-423e-be34-993bb62a4c25",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "da6e20d5-db08-4055-a7d4-198d8c84103b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "51a5eb5d-a1da-4a37-9be9-f6f35a587cda",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "02bded0a-8439-4f99-aea7-c9189aed81c2",
                            Name = "BannedUser",
                            NormalizedName = "BANNEDUSER"
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "7d966810-83dd-4a66-8326-fd2a5c5dce4d",
                            Name = "PremiumUser",
                            NormalizedName = "PREMIUMUSER"
                        });
                });

            modelBuilder.Entity("InternetForum.Administration.DAL.IdentityModels.IdentityUserRefreshToken", b =>
                {
                    b.HasOne("InternetForum.Administration.DAL.IdentityModels.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InternetForum.Administration.DAL.IdentityModels.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InternetForum.Administration.DAL.IdentityModels.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<string>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InternetForum.Administration.DAL.IdentityModels.AuthUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
